name: Terraform S3 Bucket Deployment

on:
  workflow_dispatch: {}  # Allow manual triggers
  push:
    branches: [ "master" ]  # Match your default branch
  pull_request:
    branches: [ "master" ]

# Required permissions for OIDC (recommended) or token-based auth
permissions:
  id-token: write  # For OIDC (preferred)
  contents: read   # To checkout code
  actions: write   # To dispatch workflows (if chaining)

env:
  TF_VERSION: "1.6.0"  # Terraform version
  AWS_REGION: "us-east-1"  # Default region

jobs:
  terraform:
    name: "Terraform Plan & Apply"
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "${{ env.TF_VERSION }}"

      # Initialize Terraform
      - name: Terraform Init
        id: init
        run: terraform init -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Only for testing!
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Check formatting
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive

      # Validate config
      - name: Terraform Validate
        id: validate
        run: terraform validate

      # Generate execution plan
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -input=false \
          -out=tfplan          
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Apply changes (only on master push)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false tfplan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
